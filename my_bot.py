from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from openpyxl import Workbook, load_workbook
import os

TOKEN = "7603428852:AAHRS8vizKnQuFKJ3EShsMeLjgP3OM3PsYw"

ASK_NAME, ASK_AGE, ASK_DAY, ASK_TIME = range(4)
TOUR_NAME, TOUR_BIRTH, TOUR_PHONE, TOUR_CITY = range(4, 8)

ADMIN_ID = 2077512321
TRAINER_IDS = [2077512321]

days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥"]
times = ["9:00-10:30", "10:30-12:00", "15:00-16:30", "16:30-18:00"]

def save_to_excel(filename, data_row, headers=None):
    if not os.path.exists(filename):
        wb = Workbook()
        ws = wb.active
        if headers:
            ws.append(headers)
    else:
        wb = load_workbook(filename)
        ws = wb.active
    ws.append(data_row)
    wb.save(filename)

async def send_main_menu(message):
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data="management")],
        [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–µ—Ä—ã", callback_data="coaches")],
        [InlineKeyboardButton("üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="disciplines")],
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="start_signup")],
        [InlineKeyboardButton("üèÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="tournaments")],
    ]
    await message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=InlineKeyboardMarkup(keyboard))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_main_menu(update.message)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "management":
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å", callback_data="chairman")],
            [InlineKeyboardButton("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", callback_data="executive")],
            [InlineKeyboardButton("–î–∏—Ä–µ–∫—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="tournament_director")],
            [InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="tournament_admin")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "chairman":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/FYfd7YA.jpg",
            caption="üë®‚Äçüíº **–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å** ‚Äî –ù–∞–¥—ã—Ä—Ö–∞–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "executive":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/sBF4K9U.jpg",
            caption="üëî **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä** ‚Äî –ú–µ–ª—É–∑–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "tournament_director":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/962FLlS.jpg",
            caption="üèÜ **–î–∏—Ä–µ–∫—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤** ‚Äî –ú–∞—Ç—é—à–∫–∏–Ω –†–∞–¥–∏–∫ –ú–∞—Ä–∞—Ç–æ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "tournament_admin":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/LAeiXQx.jpg",
            caption="üóÇ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤** ‚Äî –ú–∏—â–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "coaches":
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä", callback_data="head_coach")],
            [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä –ø–æ –¥—Ä–æ–Ω–∞–º", callback_data="drone_coach")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == "head_coach":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coaches")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/WmM5c87.jpg",
            caption="üë®‚Äçüè´ **–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä** ‚Äî –ú–µ–ª—É–∑–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: CS 2.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "drone_coach":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coaches")]]
        await query.message.reply_photo(
            photo="https://i.imgur.com/LAeiXQx.jpg",
            caption="üöÅ **–¢—Ä–µ–Ω–µ—Ä –ø–æ –¥—Ä–æ–Ω–∞–º** ‚Äî –ú–∏—â–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: DCL.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "disciplines":
        keyboard = [
            [InlineKeyboardButton("–ì–æ–Ω–∫–∏ –¥—Ä–æ–Ω–æ–≤", callback_data="drones")],
            [InlineKeyboardButton("–ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞", callback_data="arena")],
            [InlineKeyboardButton("–ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∏", callback_data="puzzles")],
            [InlineKeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", callback_data="rts")],
            [InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä", callback_data="tech_sim")],
            [InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä", callback_data="sport_sim")],
            [InlineKeyboardButton("–§–∞–π—Ç–∏–Ω–≥", callback_data="fighting")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ["drones", "arena", "puzzles", "rts", "tech_sim", "sport_sim", "fighting"]:
        descriptions = {
            "drones": "üöÅ **–ì–æ–Ω–∫–∏ –¥—Ä–æ–Ω–æ–≤** ‚Äî —Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è FPV-–∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–æ–≤ –Ω–∞ —Ç—Ä–∞—Å—Å–∞—Ö.",
            "arena": "‚öî **–ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞** ‚Äî –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å—Ä–∞–∂–µ–Ω–∏—è —Å —Ü–µ–ª—å—é —Ä–∞–∑—Ä—É—à–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞.",
            "puzzles": "üß© **–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏** ‚Äî —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å.",
            "rts": "üïπ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏** ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–º–∏—è–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –≤ –¥–∏–Ω–∞–º–∏—á–Ω–æ–º —Ç–µ–º–ø–µ.",
            "tech_sim": "üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä** ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–æ–π –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.",
            "sport_sim": "‚öΩ **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä** ‚Äî –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –ø–æ –Ω–∞—Å—Ç–æ—è—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º.",
            "fighting": "ü•ä **–§–∞–π—Ç–∏–Ω–≥** ‚Äî —Ä—É–∫–æ–ø–∞—à–Ω—ã–µ –±–æ–∏ –¥–≤—É—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∞—Ä–µ–Ω–µ.",
        }
        photos = {
            "drones": "https://i.imgur.com/K5JjZ0B.jpg",
            "arena": "https://i.imgur.com/QO1i48o.jpg",
            "puzzles": "https://i.imgur.com/0cybYkZ.jpg",
            "rts": "https://i.imgur.com/fosdq3a.jpg",
            "tech_sim": "https://i.imgur.com/yWk7lgY.jpg",
            "sport_sim": "https://i.imgur.com/v58jK3i.jpg",
            "fighting": "https://i.imgur.com/i0lTqTU.jpg",
        }
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="disciplines")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        await query.message.reply_photo(
            photo=photos[query.data],
            caption=descriptions[query.data],
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "tournaments":
        keyboard = [
            [InlineKeyboardButton("23 –∏—é–ª—è: Dota 2", callback_data="july_dota")],
            [InlineKeyboardButton("23 –∏—é–ª—è: –®–∞—à–∫–∏", callback_data="july_checkers")],
            [InlineKeyboardButton("8 –∞–≤–≥—É—Å—Ç–∞: FC 25", callback_data="aug_fc")],
            [InlineKeyboardButton("8 –∞–≤–≥—É—Å—Ç–∞: –®–∞—à–∫–∏", callback_data="aug_checkers")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data in ["july_dota", "july_checkers", "aug_fc", "aug_checkers"]:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä:")
        context.user_data["tournament"] = query.data
        return TOUR_NAME

    elif query.data == "start_signup":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        return ASK_NAME

    elif query.data == "back_main":
        await send_main_menu(query.message)

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return ASK_AGE

async def ask_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    keyboard = [[KeyboardButton(day)] for day in days]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return ASK_DAY

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["day"] = update.message.text
    keyboard = [[KeyboardButton(time)] for time in times]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
    return ASK_TIME

async def confirm_signup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    name = context.user_data["name"]
    age = context.user_data["age"]
    day = context.user_data["day"]
    time = context.user_data["time"]

    save_to_excel("training_signups.xlsx", [name, age, day, time], ["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–µ–Ω—å", "–í—Ä–µ–º—è"])
    for trainer_id in TRAINER_IDS:
        await context.bot.send_message(trainer_id, f"üë§ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n–§–ò–û: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–î–µ–Ω—å: {day}\n–í—Ä–µ–º—è: {time}")

    await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!", reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True))
    return ConversationHandler.END

async def tour_birth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:")
    return TOUR_BIRTH

async def tour_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["birth"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return TOUR_PHONE

async def tour_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    return TOUR_CITY

async def tour_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    name = context.user_data["name"]
    birth = context.user_data["birth"]
    phone = context.user_data["phone"]
    city = context.user_data["city"]
    tournament = context.user_data["tournament"]

    filename = f"{tournament}_signups.xlsx"
    save_to_excel(filename, [name, birth, phone, city], ["–§–ò–û", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–ì–æ—Ä–æ–¥"])

    for trainer_id in TRAINER_IDS:
        await context.bot.send_message(trainer_id, f"üë§ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä ({tournament}):\n–§–ò–û: {name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ì–æ—Ä–æ–¥: {city}")

    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!", reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True))
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_day)],
            ASK_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_signup)],

            TOUR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_birth)],
            TOUR_BIRTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_phone)],
            TOUR_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_city)],
            TOUR_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, tour_confirm)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
