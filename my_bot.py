from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from openpyxl import Workbook, load_workbook
import os

TOKEN = "7603428852:AAHRS8vizKnQuFKJ3EShsMeLjgP3OM3PsYw"

ASK_NAME, ASK_AGE, ASK_DAY, ASK_TIME = range(4)
signups = []
ADMIN_ID = 2077512321

TRAINER_IDS = [2077512321, 669664459]  # ‚Üê —Å—é–¥–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Ç—Ä–µ–Ω–µ—Ä–æ–≤

days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥"]
times = ["9:00-10:30", "10:30-12:00", "15:00-16:30", "16:30-18:00"]

def save_to_excel(name, age, day, time):
    filename = "signups.xlsx"
    if not os.path.exists(filename):
        wb = Workbook()
        ws = wb.active
        ws.title = "–ó–∞–ø–∏—Å–∏"
        ws.append(["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–µ–Ω—å", "–í—Ä–µ–º—è"])
    else:
        wb = load_workbook(filename)
        ws = wb.active

    ws.append([name, age, day, time])
    wb.save(filename)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüíº –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", callback_data="management")],
        [InlineKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–µ—Ä—ã", callback_data="coaches")],
        [InlineKeyboardButton("üéÆ –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="disciplines")],
        [InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="start_signup")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–µ–Ω—Ç—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞!\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "management":
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å", callback_data="chairman")],
            [InlineKeyboardButton("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä", callback_data="executive")],
            [InlineKeyboardButton("–î–∏—Ä–µ–∫—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="tournament_director")],
            [InlineKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="tournament_admin")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=reply_markup)

    elif query.data == "chairman":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.imgur.com/FYfd7YA.jpg",
            caption="üë®‚Äçüíº **–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å** ‚Äî –ù–∞–¥—ã—Ä—Ö–∞–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "executive":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.imgur.com/sBF4K9U.jpg",
            caption="üëî **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä** ‚Äî –ú–µ–ª—É–∑–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "tournament_director":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.ibb.co/JjmYjRNN/GUYZ5-Pe-MYe2-QV0-Tw-MMMvs-Ji-BGbyx-Ajo-GUK50-RKOEXh-Ycgf-O7pu5-Cp-Zuov5m5ih4lef-R7-CE35vj-XJAv-Hlc8.jpg",  # –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—Å—Ç–∞–≤–∫–∞
            caption="üèÜ **–î–∏—Ä–µ–∫—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤** ‚Äî –ú–∞—Ç—é—à–∫–∏–Ω –†–∞–¥–∏–∫ –ú–∞—Ä–∞—Ç–æ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "tournament_admin":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.imgur.com/LAeiXQx.jpg",
            caption="üóÇ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤** ‚Äî –ú–∏—â–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "coaches":
        keyboard = [
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä ‚Äî –ú–µ–ª—É–∑–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", callback_data="head_coach")],
            [InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä –ø–æ –≥–æ–Ω–∫–∞–º –¥—Ä–æ–Ω–æ–≤ ‚Äî –ú–∏—â–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π", callback_data="drone_coach")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:", reply_markup=reply_markup)

    elif query.data == "head_coach":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coaches")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.imgur.com/WmM5c87.jpg",
            caption="üë®‚Äçüè´ **–ì–ª–∞–≤–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä** ‚Äî –ú–µ–ª—É–∑–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: CS 2.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "drone_coach":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="coaches")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo="https://i.imgur.com/LAeiXQx.jpg",
            caption="üöÅ **–¢—Ä–µ–Ω–µ—Ä –ø–æ –≥–æ–Ω–∫–∞–º –¥—Ä–æ–Ω–æ–≤** ‚Äî –ú–∏—â–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: DCL.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

    elif query.data == "disciplines":
        keyboard = [
            [InlineKeyboardButton("–ì–æ–Ω–∫–∏ –¥—Ä–æ–Ω–æ–≤", callback_data="drones")],
            [InlineKeyboardButton("–ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞", callback_data="arena")],
            [InlineKeyboardButton("–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏", callback_data="puzzles")],
            [InlineKeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏", callback_data="rts")],
            [InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä", callback_data="tech_sim")],
            [InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä", callback_data="sport_sim")],
            [InlineKeyboardButton("–§–∞–π—Ç–∏–Ω–≥", callback_data="fighting")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", reply_markup=reply_markup)

    elif query.data in ["drones", "arena", "puzzles", "rts", "tech_sim", "sport_sim", "fighting"]:
        descriptions = {
            "drones": "üöÅ **–ì–æ–Ω–∫–∏ –¥—Ä–æ–Ω–æ–≤** ‚Äî –≥–æ–Ω–æ—á–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è FPV-–∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–æ–≤ –Ω–∞ —Ç—Ä–∞—Å—Å–∞—Ö.",
            "arena": "‚öî **–ë–æ–µ–≤–∞—è –∞—Ä–µ–Ω–∞** ‚Äî –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ü–µ–ª—å—é —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –±–∞–∑—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.",
            "puzzles": "üß© **–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏** ‚Äî —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å.",
            "rts": "üïπ **–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏** ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –±–µ–∑ —Ö–æ–¥–æ–≤, –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∏–Ω–∞–º–∏—á–Ω–æ.",
            "tech_sim": "üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä** ‚Äî –∏–º–∏—Ç–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫–æ–π –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º.",
            "sport_sim": "‚öΩ **–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä** ‚Äî –≤–∏–¥–µ–æ–∏–≥—Ä–∞, –∏–º–∏—Ç–∏—Ä—É—é—â–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.",
            "fighting": "ü•ä **–§–∞–π—Ç–∏–Ω–≥** ‚Äî –±–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∞—Ä–µ–Ω–µ, –∂–∞–Ω—Ä –≤–∏–¥–µ–æ–∏–≥—Ä –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∞.",
        }
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="disciplines")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(descriptions[query.data], reply_markup=reply_markup)

    elif query.data == "start_signup":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
        context.user_data.clear()
        context.user_data["signup"] = True
        return ASK_NAME

    elif query.data == "back_main":
        await start(query, context)

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("signup"):
        context.user_data["name"] = update.message.text
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        return ASK_AGE

async def ask_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["age"] = update.message.text
    keyboard = [[KeyboardButton(day)] for day in days]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)
    return ASK_DAY

async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["day"] = update.message.text
    keyboard = [[KeyboardButton(time)] for time in times]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    return ASK_TIME

async def confirm_signup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data["name"]
    age = context.user_data["age"]
    day = context.user_data["day"]
    time = update.message.text

    signups.append({"name": name, "age": age, "day": day, "time": time})
    save_to_excel(name, age, day, time)

    message = f"üë§ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n–§–ò–û: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–î–µ–Ω—å: {day}\n–í—Ä–µ–º—è: {time}"
    for trainer_id in TRAINER_IDS:
        await context.bot.send_message(chat_id=trainer_id, text=message)

    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª –≤–∞—Å, {name} (–≤–æ–∑—Ä–∞—Å—Ç: {age}), –Ω–∞ {day} –≤ {time}.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    return ConversationHandler.END

async def list_signups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ üö´")
        return
    if not signups:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.")
        return
    text = "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è:\n\n"
    for i, s in enumerate(signups, start=1):
        text += f"{i}. {s['name']} (–≤–æ–∑—Ä–∞—Å—Ç: {s['age']}) ‚Äî {s['day']} –≤ {s['time']}\n"
    await update.message.reply_text(text)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_signups))

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^start_signup$")],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_day)],
            ASK_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_signup)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()

